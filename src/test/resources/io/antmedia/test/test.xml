<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:///${user.dir}/src/main/server/conf/red5.properties</value>
				<value>file:///${user.dir}/src/test/resources/WEB-INF/red5-web.properties</value>
			</list>
		</property>
	</bean>


	<!-- Server bean -->
	<bean id="red5.server" class="org.red5.server.Server" />

	<bean id="providerService" class="org.red5.server.stream.ProviderService" />
	<bean id="consumerService" class="org.red5.server.stream.ConsumerService" />
	<!-- <bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService" 
		/> -->

	<!-- Global stuff from red5-default.xml -->
	<bean id="global.clientRegistry" class="org.red5.server.ClientRegistry" />

	<bean id="global.serviceInvoker" class="org.red5.server.service.ServiceInvoker">
		<property name="serviceResolvers">
			<list>
				<bean id="scopeServiceResolver" class="org.red5.server.service.ScopeServiceResolver" />
				<bean id="handlerServiceResolver" class="org.red5.server.service.HandlerServiceResolver" />
				<bean id="contextServiceResolver" class="org.red5.server.service.ContextServiceResolver" />
			</list>
		</property>
	</bean>

	<bean id="global.mappingStrategy" class="org.red5.server.MappingStrategy" />

	<bean id="global.context" autowire="byType" class="org.red5.server.Context">
		<property name="contextPath" value="test" />
	</bean>

	<bean id="global.handler" autowire="byType" class="org.red5.server.CoreHandler" />

	<bean id="global.scope" class="org.red5.server.scope.GlobalScope"
		init-method="register">
		<property name="server" ref="red5.server" />
		<property name="name" value="default" />
		<property name="context" ref="global.context" />
		<property name="handler" ref="global.handler" />
	</bean>

	<bean id="red5.scopeResolver" class="org.red5.server.scope.ScopeResolver">
		<property name="globalScope" ref="global.scope" />
	</bean>



	<!-- Application stuff from red5-web.xml -->
	<bean id="web.context" autowire="byType" class="org.red5.server.Context" />

	<bean id="web.scope" class="org.red5.server.scope.WebScope">
		<property name="server" ref="red5.server" />
		<property name="parent" ref="global.scope" />
		<property name="context" ref="web.context" />
		<property name="handler" ref="web.handler" />
		<property name="contextPath" value="/junit" />
		<property name="virtualHosts" value="*" />
	</bean>
	
<!-- 	<bean id="db.datastore" class="io.antmedia.datastore.db.InMemoryDataStore">
		<constructor-arg value="junit.db" />
	</bean>
 -->
    <bean id="dataStoreFactory" class="io.antmedia.datastore.db.DataStoreFactory">
		<property name="dbName" value="junit.db" />
		<property name="dbType" value="memorydb" />
		<property name="dbHost" value="" />
		<property name="dbUser" value="" />
		<property name="dbPassword" value="" />
	</bean>
	
	<bean id="app.settings" class="io.antmedia.AppSettings"></bean>
	
	<bean id="streamAcceptFilter" class="io.antmedia.filter.StreamAcceptFilter"/>

	<bean id="app.storageClient" class="io.antmedia.storage.AmazonS3StorageClient">
	</bean>

	<bean id="web.handler" class="io.antmedia.test.Application">
		<property name="dataStoreFactory" ref="dataStoreFactory" />
		<property name="appSettings" ref="app.settings" />
		<property name="streamAcceptFilter" ref="streamAcceptFilter"/>
		<property name="streamPublishSecurityList">
			<list>
				<bean class="io.antmedia.security.ExpireStreamPublishSecurity" >
					<property name="dataStoreFactory"  ref="dataStoreFactory"/>
				</bean>
			</list>
		</property>
	</bean>

	<!-- Streamable file factory -->
	<bean id="streamableFileFactory" class="org.red5.server.stream.StreamableFileFactory">
		<property name="services">
			<list>
				<bean id="flvFileService" class="org.red5.server.service.flv.impl.FLVService">
					<property name="generateMetadata" value="true" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="clientBroadcastStream" scope="prototype" lazy-init="true"
		class="org.red5.server.stream.ClientBroadcastStream">
		<property name="automaticRecording" value="true" />
	</bean>
	
	


	<!-- Scheduling service -->
	<bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService">
		<property name="configFile"
			value="${user.dir}/src/main/server/conf/quartz.properties" />
	</bean>
	
    <bean id="scheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
        <property name="poolSize" value="20" />
        <property name="daemon" value="true" />
        <property name="waitForTasksToCompleteOnShutdown" value="true" />
        <property name="threadNamePrefix" value="ConnectionScheduler-" />
    </bean>


	<bean id="muxerScheduler"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
		<property name="poolSize" value="50" />
		<property name="daemon" value="true" />
		<property name="waitForTasksToCompleteOnShutdown" value="true" />
		<property name="threadNamePrefix" value="MuxerScheduler-" />
	</bean>
	
	
	 <bean id="vertxMetricOptions" class="io.vertx.ext.dropwizard.DropwizardMetricsOptions">
        <property name="enabled" value="true"/>        
    </bean>
    
    
	  <bean id="vertxCore" 
    		class="io.vertx.core.Vertx" 
   		factory-method="vertx">
   		<constructor-arg>
   			<bean class="io.vertx.core.VertxOptions">
   				<property name="metricsOptions" ref="vertxMetricOptions"></property>
   				<property name="maxWorkerExecuteTime" value="2000000000"></property>
   			</bean>
   		</constructor-arg>	
   	</bean>
   	
   	 <bean id="webRTCVertx" class="io.vertx.core.Vertx" factory-method="vertx">
    	<constructor-arg>
    		<bean class="io.vertx.core.VertxOptions">
    			<property name="metricsOptions" ref="vertxMetricOptions"></property>
    			<property name="maxWorkerExecuteTime" value="2000000000"></property> <!-- make max worker execute time 2 seconds -->
    		</bean>
    	</constructor-arg>
    </bean>
   	
   	<bean id="ant.media.server.settings" class="io.antmedia.settings.ServerSettings">
	</bean>

	<bean id="statsCollector" class="io.antmedia.statistic.StatsCollector" init-method="start">
   		<property name="cpuLimit" value="100"/>
   		<property name="minFreeRamSize" value="20"/>
   	</bean>
   	
   	<bean id="ant.media.licence.service" class="#{ T(io.antmedia.rest.RestServiceBase).isEnterprise() ? 'io.antmedia.enterprise.licence.LicenceService' : 'io.antmedia.licence.CommunityLicenceService' }"
	init-method="start">
		<property name="serverSettings" ref="ant.media.server.settings" />						
	</bean>

	<context:component-scan base-package="io.antmedia.component" />


</beans>