<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/lang 
	http://www.springframework.org/schema/lang/spring-lang.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config></context:annotation-config>

	<!-- War deployer -->
	<bean id="warDeployer" class="org.red5.server.tomcat.WarDeployer">
		<property name="checkInterval" value="${war.deploy.server.check.interval}" />
		<property name="webappFolder" value="${red5.root}/webapps" />
		<!-- Expand war files prior to startup of the remaining services -->
		<property name="expandWars" value="true" />
	</bean>

	<!-- The tomcat connectors may be blocking or non-blocking. Select between 
		either option via the protocol property. Blocking I/O: <property name="protocol" 
		value="org.apache.coyote.http11.Http11Protocol" /> Non-blocking I/O: <property 
		name="protocol" value="org.apache.coyote.http11.Http11NioProtocol" /> -->

	<!-- cluster start
	<bean id="tomcat.cluster" class="io.antmedia.enterprise.cluster.TcpCluster">
		<property name="clusterStore">
			<bean class="io.antmedia.enterprise.cluster.ClusterStore">
				<constructor-arg value="${clusterdb.host}" />
				<constructor-arg value="${clusterdb.user}" />
				<constructor-arg value="${clusterdb.password}" />
			</bean>
		</property>
	</bean>
	cluster end -->


	<!-- Tomcat without SSL enabled -->
	<bean id="tomcat.server" class="org.red5.server.tomcat.TomcatLoader"
		depends-on="context.loader,warDeployer" lazy-init="true">
		<!-- cluster --><!-- property name="cluster" ref="tomcat.cluster" /--><!-- cluster -->
		<property name="webappFolder" value="${red5.root}/webapps" />

		<property name="connectors">
			<list>
				<bean name="httpConnector" class="org.red5.server.tomcat.TomcatConnector">
					<property name="protocol"
						value="org.apache.coyote.http11.Http11Nio2Protocol" />
					<property name="address" value="${http.host}:${http.port}" />
					<property name="redirectPort" value="${https.port}" />
					<property name="connectionProperties">
						<map>
							<entry key="maxKeepAliveRequests" value="${http.max_keep_alive_requests}" />
							<entry key="keepAliveTimout" value="-1" />
							<entry key="useExecutor" value="true"/> 
							<entry key="maxThreads" value="${http.max_threads}"/> 
							<entry key="acceptorThreadCount" value="${http.acceptor_thread_count}"/> 
							<entry key="processorCache" value="${http.processor_cache}"/> 
							<entry key="relaxedQueryChars" value="{}" />
						</map>
					</property>
				</bean>
				<!-- https start
				<bean name="httpsConnector" class="org.red5.server.tomcat.TomcatConnector"> 
						<property name="secure" value="true" /> 
						<property name="protocol" value="org.apache.coyote.http11.Http11Nio2Protocol"/> 
						<property name="address" value="${http.host}:${https.port}" /> 
						<property name="redirectPort" value="${http.port}" /> 
						<property name="connectionProperties"> 
							<map> 
								<entry key="port" value="${https.port}" /> 
								<entry key="redirectPort" value="${http.port}" /> 
								<entry key="SSLEnabled" value="true" /> 
								<entry key="sslEnabledProtocols" value="TLSv1.2" /> 
								<entry key="sslProtocol" value="TLSv1.2" />
                            	                                <entry key="useServerCipherSuitesOrder" value="true" />
                            	                                <entry key="ciphers" value="TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_CCM_8,TLS_DHE_RSA_WITH_AES_256_CCM" />
								<entry key="SSLCertificateFile" value="${http.ssl_certificate_file}" />
								<entry key="SSLCertificateChainFile" value="${http.ssl_certificate_chain_file}" />
                                                                <entry key="SSLCertificateKeyFile" value="${http.ssl_certificate_key_file}" />
								<entry key="clientAuth" value="false" /> 
								<entry key="allowUnsafeLegacyRenegotiation" value="true" /> 
								<entry key="maxKeepAliveRequests" value="${http.max_keep_alive_requests}"/> 
								<entry key="keepAliveTimout" value="-1"/> 
								<entry key="useExecutor" value="true"/> 
								<entry key="maxThreads" value="${http.max_threads}"/> 
								<entry key="acceptorThreadCount" value="${http.acceptor_thread_count}"/> 
								<entry key="processorCache" value="${http.processor_cache}"/> 
								<entry key="relaxedQueryChars" value="{}" />
							</map> 
						</property> 
					</bean>
					https end -->
			</list>
		</property>

		<property name="baseHost">
			<bean class="org.apache.catalina.core.StandardHost">
				<property name="name" value="${http.host}" />
			</bean>
		</property>

		<property name="valves">
			<list>
			    <!-- This valve replaces the apparent client remote IP address and hostname for the request with the IP address list presented by a proxy or a load balancer via a request headers (e.g. "X-Forwarded-For").
					If the request is coming to the server through load balancer, this valve lets Tomcat see the client original ip address(that makes the request to tthe load balancer) as client Remote IP
					If load balancer address is not in the internalProxies and trustedProxies, this operation may fail.
					
				-->
				<bean id="valve.access" class="org.apache.catalina.valves.RemoteIpValve" />
				<bean id="valve.access" class="org.apache.catalina.valves.AccessLogValve">
					<property name="directory" value="log" />
					<property name="prefix" value="${http.host}_access" />
					<property name="suffix" value=".log" />
					<property name="pattern" value="common" />
					<property name="rotatable" value="true" />
					<property name="requestAttributesEnabled" value="true" />
				</bean>
				
				<!-- cluster start
				<bean id="valve.cluster" class="io.antmedia.enterprise.cluster.HttpLiveStreamValve">
					<property name="asyncSupported" value="true" />
				</bean>
				cluster end --> 
			</list>
		</property>

	</bean>

</beans>
